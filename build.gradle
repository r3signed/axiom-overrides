plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group
int javaTarget = java_version as Integer

base {
    archivesName = project.mod_id
}

repositories {}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modCompileOnly files("./libs/axiom.jar")
    include(implementation("com.moulberry:mixinconstraints:1.0.8"))
}

/**
 * Loom overrides
 */
loom {
    runs {
        remove server
    }
}
tasks.named("runClient") {
    dependsOn("setupAxiom")
}

/**
 * Copies the Axiom JAR from the libs directory to the run/mods directory.
 */
tasks.register("setupAxiom") {
    doFirst {
        def axiomJar = file("./libs/axiom.jar")
        if (!axiomJar.exists()) {
            throw new GradleException("Axiom jar not found at ${axiomJar.absolutePath}")
        }

        def modsDir = file("${projectDir}/run/mods/")
        if (!modsDir.exists()) {
            modsDir.mkdirs()
        }

        def axiomCopy = file("${projectDir}/run/mods/axiom.jar")
        if (!axiomCopy.exists()) {
            axiomCopy << axiomJar.bytes
            println "Axiom jar copied to ${axiomCopy.absolutePath}"
        } else {
            println "Axiom jar already exists at ${axiomCopy.absolutePath}"
        }
    }
}

processResources {
    inputs.property "version", version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", fabric_loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": minecraft_version,
                "loader_version": fabric_loader_version
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    if (javaTarget >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(javaTarget)
    }
}

java {
    if (JavaVersion.current() < JavaVersion.toVersion(javaTarget)) {
        toolchain.languageVersion = JavaLanguageVersion.of(javaTarget)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_id}" }
    }
}
