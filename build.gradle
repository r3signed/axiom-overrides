import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group
int javaTarget = java_version as Integer

base {
    archivesName = project.mod_id
}

repositories {}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modCompileOnly files("./libs/axiom.jar")
    include(implementation("com.moulberry:mixinconstraints:1.0.8"))
}

/**
 * Loom overrides
 */
loom {
    runs {
        remove server
    }
}
tasks.named("runClient") {
    dependsOn("setupAxiom", "updateLangFiles")
}

/**
 * Copies the Axiom JAR from the libs directory to the run/mods directory.
 */
tasks.register("setupAxiom") {
    description = "Copies the Axiom JAR to the run/mods directory."
    group = "build setup"

    doFirst {
        def axiomJar = file("./libs/axiom.jar")
        if (!axiomJar.exists()) {
            throw new GradleException("Axiom jar not found at ${axiomJar.absolutePath}")
        }

        def modsDir = file("${projectDir}/run/mods/")
        if (!modsDir.exists()) {
            modsDir.mkdirs()
        }

        def axiomCopy = file("${projectDir}/run/mods/axiom.jar")
        if (!axiomCopy.exists()) {
            axiomCopy << axiomJar.bytes
            println "Axiom jar copied to ${axiomCopy.absolutePath}"
        } else {
            println "Axiom jar already exists at ${axiomCopy.absolutePath}"
        }
    }
}

/**
 * Updates the language files with Axiom's translations.
 */
tasks.register("updateLangFiles") {
    description = "Updates the language files with Axiom's translations."
    group = "build setup"

    def axiomJar = file("./libs/axiom.jar")
    def targetLangDir = file("${projectDir}/src/main/resources/assets/${mod_id}/lang/")
    def axiomLangDir = file("${buildDir}/axiom-lang/")

    doLast {
        if (!axiomJar.exists()) {
            throw new GradleException("Axiom JAR not found at ${axiomJar.absolutePath}")
        }

        if (!targetLangDir.exists()) {
            targetLangDir.mkdirs()
        }
        axiomLangDir.delete()
        axiomLangDir.mkdirs()

        println("Extracting Axiom language files...")
        copy {
            from(zipTree(axiomJar)) {
                include "assets/axiom/lang/*.json"
                eachFile { details -> details.path = details.name }
            }
            into(axiomLangDir)
        }

        println("Applying language files...")
        def jsonSlurper = new JsonSlurper()

        axiomLangDir.eachFile { File langFile ->
            if (langFile.isFile() && langFile.name.endsWith(".json")) {
                def targetFile = new File(targetLangDir, langFile.name)

                if (!targetFile.exists()) {
                    println("> Creating new language file \"${langFile.name}\"")
                    copy {
                        from langFile
                        into targetLangDir
                    }
                } else {
                    println("> Updating existing language file \"${langFile.name}\"")
                    def langData = jsonSlurper.parse(langFile)
                    def targetData = jsonSlurper.parse(targetFile)
                    boolean needsUpdate = false

                    langData.each { key, value ->
                        if (!targetData.containsKey(key) || targetData[key] != value) {
                            println("  -> Updating \"${key}\" to \"${value}\"")
                            targetData[key] = value
                            needsUpdate = true
                        }
                    }

                    if (needsUpdate) {
                        targetFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(targetData)), "UTF-8")
                    } else {
                        println("  -> No changes detected, skipping...")
                    }

                    println("  -> Done")
                }
            }
        }

        axiomLangDir.delete()
        println("Successfully updated language files")
    }

}

processResources {
    inputs.property "version", version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", fabric_loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": minecraft_version,
                "loader_version": fabric_loader_version
    }
}

tasks.withType(JavaCompile).configureEach {
    dependsOn("updateLangFiles")

    options.encoding = "UTF-8"
    if (javaTarget >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(javaTarget)
    }
}

java {
    if (JavaVersion.current() < JavaVersion.toVersion(javaTarget)) {
        toolchain.languageVersion = JavaLanguageVersion.of(javaTarget)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_id}" }
    }
}
